{"version":3,"sources":["login.component.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA4D;AAU5D,wDAAgD;AAWhD;IAKI,wBAAoB,GAAsB,EAAS,WAAgC,EAAa,aAA4B,EAAW,MAAc,EAAU,SAA2B;QAAtK,QAAG,GAAH,GAAG,CAAmB;QAAS,gBAAW,GAAX,WAAW,CAAqB;QAAa,kBAAa,GAAb,aAAa,CAAe;QAAW,WAAM,GAAN,MAAM,CAAQ;QAAU,cAAS,GAAT,SAAS,CAAkB;QAJ9L,eAAU,GAAY,KAAK,CAAC;QAC1B,YAAO,GAAU,IAAI,oBAAK,EAAE,CAAC;QAC7B,kBAAa,GAAW,EAAE,CAAC;IAEsK,CAAC;IAElM,8BAAK,GAAL;QAAA,iBAoCC;QAnCD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAC5C,UAAC,QAAa;YACZ,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEtB,qDAAqD;YACrD,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEtD,+CAA+C;YAC/C,IAAM,YAAY,GAAG,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEhE,0CAA0C;YAC1C,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,4DAA4D,CAAC,CAAC,CAAC;YACzG,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,sEAAsE,CAAC,CAAC,CAAC;YACxH,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YAElB,oCAAoC;YACtC,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACvC,KAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;YAE1D,4BAA4B;YACxB,KAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;YAE7B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAElC,CAAC,EACD,UAAC,KAAU;YAGD,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YAC5C,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,gDAAgD;YACjF,6BAA6B;QAC/B,CAAC,CACF,CAAC;IACF,CAAC;IACA,+BAAM,GAAN;QACC,4EAA4E;QAC5E,YAAY,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QACzC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAChC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAElC,2DAA2D;QAC3D,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,YAAY,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAEtC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnC,CAAC;IAvDU,cAAc;QAL1B,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,WAAW,EAAE,wBAAwB;YACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;SACrC,CAAC;OACW,cAAc,CA2D1B;IAAD,qBAAC;CA3DD,AA2DC,IAAA;AA3DY,wCAAc","file":"login.component.js","sourcesContent":["import { Component,ChangeDetectorRef } from '@angular/core';\n\nimport { Person } from '../modules/person/person.module';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\nimport { Login } from '../modules/login.module';\nimport { AuthServicesService } from '../services/auth-services.service';\nimport { SharedService } from '../services/shared.service';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\nisLoggedIn: boolean = false; \n  newItem: Login = new Login();\n  errorMessages: string = '';\n  \n    constructor(private cdr: ChangeDetectorRef,private authService: AuthServicesService,    private sharedService: SharedService , private router: Router, private jwtHelper: JwtHelperService,) { }\n\n  login(): void {\n  this.authService.login(this.newItem).subscribe(\n    (response: any) => {\n      // Handle the successful response here\n      console.log(response);\n\n      // Store the JWT token in local storage (as a string)\n      localStorage.setItem('Authorization', response.token);\n\n      // Decode the JWT token to get user information\n      const decodedToken = this.jwtHelper.decodeToken(response.token);\n\n      // Store user information in local storage\n      localStorage.setItem('name', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"]);\n      localStorage.setItem('userid', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"]);\n   this.isLoggedIn = true;\n\n        // Store isLoggedIn in local storage\n      localStorage.setItem('isLoggedIn', \"true\");\n          this.sharedService.setLoggedInStatus(this.isLoggedIn);\n\n      // Redirect to the home page\n          this.cdr.detectChanges();\n\n      this.router.navigate(['/home']);\n          \n    },\n    (error: any) => {\n\n      \n              console.error('Login failed!', error);\n        this.errorMessages = error;\n      console.log(error.error.errors); // Log the specific error messages, if available\n      // Handle the error as needed\n    }\n  );\n  }\n   logout(): void {\n    // Clear user information from local storage and navigate back to login page\n    localStorage.removeItem('Authorization');\n    localStorage.removeItem('name');\n    localStorage.removeItem('userid');\n\n    // Set isLoggedIn to false and remove it from local storage\n    this.isLoggedIn = false;\n    localStorage.removeItem('isLoggedIn');\n\n    this.router.navigate(['/login']);\n  }\n\n\n\n}\n"]}