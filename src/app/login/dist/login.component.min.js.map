{"version":3,"sources":["login.component.ts"],"names":["core_1","require","login_module_1","LoginComponent","cdr","authService","sharedService","router","jwtHelper","this","isLoggedIn","newItem","Login","errorMessages","prototype","login","_this","subscribe","response","console","log","localStorage","setItem","token","decodedToken","decodeToken","setLoggedInStatus","detectChanges","navigate","error","errors","logout","removeItem","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAUAC,eAAAD,QAAA,2BAWAE,eAAA,WAKI,SAAAA,EAAoBC,EAA+BC,EAA6CC,EAAuCC,EAAwBC,GAA3IC,KAAAL,IAAAA,EAA+BK,KAAAJ,YAAAA,EAA6CI,KAAAH,cAAAA,EAAuCG,KAAAF,OAAAA,EAAwBE,KAAAD,UAAAA,EAJnKC,KAAAC,YAAsB,EACpBD,KAAAE,QAAiB,IAAIT,eAAAU,MACrBH,KAAAI,cAAwB,GAwD1B,OApDEV,EAAAW,UAAAC,MAAA,WAAA,IAAAC,EAAAP,KACAA,KAAKJ,YAAYU,MAAMN,KAAKE,SAASM,UACnC,SAACC,GAECC,QAAQC,IAAIF,GAGZG,aAAaC,QAAQ,gBAAiBJ,EAASK,OAG/C,IAAMC,EAAeR,EAAKR,UAAUiB,YAAYP,EAASK,OAGzDF,aAAaC,QAAQ,OAAQE,EAAa,+DAC1CH,aAAaC,QAAQ,SAAUE,EAAa,yEAC/CR,EAAKN,YAAa,EAGfW,aAAaC,QAAQ,aAAc,QAC/BN,EAAKV,cAAcoB,kBAAkBV,EAAKN,YAG1CM,EAAKZ,IAAIuB,gBAEbX,EAAKT,OAAOqB,SAAS,CAAC,WAGxB,SAACC,GAGSV,QAAQU,MAAM,gBAAiBA,GACrCb,EAAKH,cAAgBgB,EACvBV,QAAQC,IAAIS,EAAMA,MAAMC,WAK3B3B,EAAAW,UAAAiB,OAAA,WAECV,aAAaW,WAAW,iBACxBX,aAAaW,WAAW,QACxBX,aAAaW,WAAW,UAGxBvB,KAAKC,YAAa,EAClBW,aAAaW,WAAW,cAExBvB,KAAKF,OAAOqB,SAAS,CAAC,YAtDbzB,EAAc8B,WAAA,CAL1BjC,OAAAkC,UAAU,CACTC,SAAU,YACVC,YAAa,yBACbC,UAAW,CAAC,4BAEDlC,GAAb,GAAamC,QAAAnC,eAAAA","file":"login.component.min.js","sourcesContent":["import { Component,ChangeDetectorRef } from '@angular/core';\n\nimport { Person } from '../modules/person/person.module';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\nimport { Login } from '../modules/login.module';\nimport { AuthServicesService } from '../services/auth-services.service';\nimport { SharedService } from '../services/shared.service';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\nisLoggedIn: boolean = false; \n  newItem: Login = new Login();\n  errorMessages: string = '';\n  \n    constructor(private cdr: ChangeDetectorRef,private authService: AuthServicesService,    private sharedService: SharedService , private router: Router, private jwtHelper: JwtHelperService,) { }\n\n  login(): void {\n  this.authService.login(this.newItem).subscribe(\n    (response: any) => {\n      // Handle the successful response here\n      console.log(response);\n\n      // Store the JWT token in local storage (as a string)\n      localStorage.setItem('Authorization', response.token);\n\n      // Decode the JWT token to get user information\n      const decodedToken = this.jwtHelper.decodeToken(response.token);\n\n      // Store user information in local storage\n      localStorage.setItem('name', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"]);\n      localStorage.setItem('userid', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"]);\n   this.isLoggedIn = true;\n\n        // Store isLoggedIn in local storage\n      localStorage.setItem('isLoggedIn', \"true\");\n          this.sharedService.setLoggedInStatus(this.isLoggedIn);\n\n      // Redirect to the home page\n          this.cdr.detectChanges();\n\n      this.router.navigate(['/home']);\n          \n    },\n    (error: any) => {\n\n      \n              console.error('Login failed!', error);\n        this.errorMessages = error;\n      console.log(error.error.errors); // Log the specific error messages, if available\n      // Handle the error as needed\n    }\n  );\n  }\n   logout(): void {\n    // Clear user information from local storage and navigate back to login page\n    localStorage.removeItem('Authorization');\n    localStorage.removeItem('name');\n    localStorage.removeItem('userid');\n\n    // Set isLoggedIn to false and remove it from local storage\n    this.isLoggedIn = false;\n    localStorage.removeItem('isLoggedIn');\n\n    this.router.navigate(['/login']);\n  }\n\n\n\n}\n"]}