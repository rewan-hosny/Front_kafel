{"version":3,"sources":["manage-project.component.ts"],"names":["core_1","require","GetImage_module_1","Message_module_1","acceptedOffer_module_1","person_module_1","ManageProjectComponent","http","router","route","authService","offerService","jwtHelper","this","person","Person","message","Message","acceptoffer","AcceptedOffer","getImage","GetImage","messages","massege","reciverId","prototype","ngOnInit","_this","PersonData","params","subscribe","projectId","GetAcceptedOffer","GetMessages","getIfFreelance","calculateReceiverId","_d","_c","_b","_a","offers","freelance","id","_e","_j","_h","_g","_f","project","_o","_m","_l","_k","calculateReceiverName","firstName","GetIfFreelance","data","messagge","console","log","error","GetUser","result","imageSrc","imageUrl","GetAcceptProject","submitForm","Rewan","e","PostMessage","PotsMessage","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"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","file":"manage-project.component.min.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthServicesService } from '../services/auth-services.service';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport { GetImage } from '../modules/GetImage.module';\nimport { OfferServicesService } from '../services/offer-services.service';\nimport { Message } from '../modules/Message.module';\nimport { ActivatedRoute } from '@angular/router';\nimport { AcceptedOffer } from '../modules/acceptedOffer.module';\nimport { Person } from '../modules/person/person.module';\n\n@Component({\n  selector: 'app-manage-project',\n  templateUrl: './manage-project.component.html',\n  styleUrls: ['./manage-project.component.css']\n})\nexport class ManageProjectComponent {\n  person: Person = new Person();\n  message: Message = new Message();\n  acceptoffer: AcceptedOffer = new AcceptedOffer();\n  getImage: GetImage = new GetImage();\n  messages: Message[] = [];\n  massege: string = '';\n  reciverId: number = 0;\n     messagge:any; \n\nprojectId!: number;\n  public imageSrc: string | undefined;\n  constructor(private http: HttpClient, private router: Router,private route: ActivatedRoute, private authService: AuthServicesService, private offerService: OfferServicesService, private jwtHelper: JwtHelperService) { }\n  ngOnInit(): void {\n    this.PersonData();\n    this.GetImage();\n     this.route.params.subscribe(params => {\n    this.projectId = +params['id']; // Assuming the route parameter name is 'id'\n       this.GetAcceptedOffer();\n       this.GetMessages();\n       this.getIfFreelance();\n\n   \n  });\n  }\ncalculateReceiverId(): number {\n    if (this.acceptoffer?.offers?.freelance?.person?.id === this.person?.id) {\n      return this.acceptoffer?.offers?.project?.person?.id || 0;\n    } else {\n      return this.acceptoffer?.offers?.freelance?.person?.id || 0;\n    }\n}\n  calculateReceiverName(): string {\n  if (this.acceptoffer?.offers?.freelance?.person?.id === this.person?.id) {\n    return  this.acceptoffer?.offers?.freelance?.person?.firstName || 'Unknown';\n  } else {\n    return this.acceptoffer?.offers?.project?.person?.firstName || 'Unknown';\n  }\n}\n\n  getIfFreelance(){\n  \n    this.offerService.GetIfFreelance().subscribe(\n      (data: any) => {\n        // Handle the response, here 'data' contains the project details\n        this.messagge = data;\n        console.log(this.messagge)\n        // You can now use 'this.projectDetails' to display the project details on your template\n      },\n      error => {\n        // Handle the error if the API call fails\n   \n            console.log(this.messagge.freelance)\n        console.error('Error fetching project details:', error);\n      });\n  }\n \n  PersonData() {\n    this.authService.GetUser().subscribe(\n      (result: any) => {\n        this.person = result;\n      },\n      (error: any) => {\n        console.log(error);\n      }\n    );\n  }\n  GetMessages() {\n  this.offerService.GetMessages(this.projectId).subscribe(\n    (result: any) => {\n      this.messages = result;\n \n    },\n    (error: any) => {\n      console.log(error);\n    }\n  );\n   }\n\n  GetImage() {\n    this.authService.GetImage().subscribe(\n      (result: any) => {\n        this.getImage = result;\n        this.imageSrc = `data:image/jpeg;base64,${this.getImage.imageUrl}`;\n      },\n      (error: any) => {\n        console.log(error);\n      }\n    );\n  }\n GetAcceptedOffer() {\n    this.offerService.GetAcceptProject(this.projectId).subscribe(\n      (result: any) => {\n        this.acceptoffer = result;\n  \n      },\n      (error: any) => {\n        console.log(error);\n      }\n    );\n }\n   submitForm() {\n    // Call the Rewan function and pass the inputValue as an argument\n    this.Rewan(this.massege);\n  }\n\n  Rewan(e: string) {\n    this.PostMessage(e);\n    console.log(e);\n}\n  PostMessage(e:string) {\n    this.massege = e;\n     this.reciverId = this.calculateReceiverId();\n    this.offerService.PotsMessage(this.massege,this.reciverId, this.projectId).subscribe(\n      () => {\n        console.log(`message send successfully.`);\n        this.GetMessages();\n   \n      },\n      (error: any) => {\n        console.log(`Error updating }: ${error}`);\n      }\n    );;\n  }\n\n\n\n}"]}