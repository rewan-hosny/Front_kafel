{"version":3,"sources":["project-details.component.ts"],"names":["core_1","require","Project_module_1","CreateOffer_module_1","ProjectDetailsComponent","http","router","projectService","offerService","route","this","projectDetails","Project","console","OfferDetails","acceptanceStatus","createOffer","CreateOffer","showBidSection","prototype","ngOnInit","_this","params","subscribe","projectId","storedShowBidSection","localStorage","getItem","JSON","parse","getProjectDetails","getOfferDetails","hideBidSection","setItem","stringify","toggleBidSection","GetOneProject","data","error","CreateOffers","log","getSafeImageUrl","base64String","GetOffer","AcceptOffer","id","AcceptProject","response","status","viewProjectDetails","navigate","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAMAC,iBAAAD,QAAA,6BAEAE,qBAAAF,QAAA,iCAQAG,wBAAA,WASE,SAAAA,EAAoBC,EAA2BC,EAAwBC,EAA+CC,EAA4CC,GAA9IC,KAAAL,KAAAA,EAA2BK,KAAAJ,OAAAA,EAAwBI,KAAAH,eAAAA,EAA+CG,KAAAF,aAAAA,EAA4CE,KAAAD,MAAAA,EANlKC,KAAAC,eAAwB,IAAIT,iBAAAU,QACzBF,KAAAG,QAAUA,QACbH,KAAAI,aAAwB,GACtBJ,KAAAK,iBAAkC,KACnCL,KAAAM,YAA2B,IAAIb,qBAAAc,YAClCP,KAAAQ,gBAA0B,EAyG1B,OAvGCd,EAAAe,UAAAC,SAAA,WAAA,IAAAC,EAAAX,KAECA,KAAKD,MAAMa,OAAOC,UAAU,SAAAD,GAC1BD,EAAKG,WAAaF,EAAW,GAI7B,IAAMG,EAAuBC,aAAaC,QAAQ,kBAAkBN,EAAKG,WAC5C,OAAzBC,IACFJ,EAAKH,eAAiBU,KAAKC,MAAMJ,IAGnCJ,EAAKS,oBACLT,EAAKU,qBAIT3B,EAAAe,UAAAa,eAAA,WACEtB,KAAKQ,gBAAiB,EAEtBQ,aAAaO,QAAQ,kBAAkBvB,KAAKc,UAAaI,KAAKM,UAAUxB,KAAKQ,kBAI/Ed,EAAAe,UAAAgB,iBAAA,WACEzB,KAAKQ,gBAAkBR,KAAKQ,eAE5BQ,aAAaO,QAAQ,kBAAkBvB,KAAKc,UAAaI,KAAKM,UAAUxB,KAAKQ,kBAG7Ed,EAAAe,UAAAW,kBAAA,WAAA,IAAAT,EAAAX,KAEEA,KAAKH,eAAe6B,cAAc1B,KAAKc,WAAWD,UAChD,SAACc,GAEChB,EAAKV,eAAiB0B,GAGxB,SAAAC,GAEEzB,QAAQyB,MAAM,kCAAmCA,MAIvDlC,EAAAe,UAAAoB,aAAA,WAAA,IAAAlB,EAAAX,KACEA,KAAKF,aAAaS,YAAYP,KAAKM,YAAYN,KAAKc,WAAWD,UAC/D,WACIV,QAAQ2B,IAAI,qCACZnB,EAAKU,mBAGT,SAACO,GACCzB,QAAQ2B,IAAI,qBAAqBF,MAMnClC,EAAAe,UAAAsB,gBAAA,SAAgBC,GAClB,OAAIA,EACK,0BAA4BA,EAG5B,KAGTtC,EAAAe,UAAAY,gBAAA,WAAA,IAAAV,EAAAX,KAEEA,KAAKF,aAAamC,SAASjC,KAAKc,WAAWD,UACzC,SAACc,GAEChB,EAAKP,aAAeuB,GAGtB,SAAAC,GAEEzB,QAAQyB,MAAM,kCAAmCA,MAIrDlC,EAAAe,UAAAyB,YAAA,SAAYC,GAAZ,IAAAxB,EAAAX,KACAA,KAAKF,aAAasC,cAAcD,GAAItB,UAClC,SAACwB,GACClC,QAAQ2B,IAAI,gCAClBnB,EAAKc,mBACCd,EAAKU,kBACLV,EAAKN,iBAAmB,uDAAuDgC,EAASF,GAAE,KAE5F,SAACP,GACCzB,QAAQ2B,IAAI,0BAA0BF,GACjB,MAAjBA,EAAMU,QAAkC,0EAAhBV,EAAMA,MAChCjB,EAAKN,iBAAmB,wEAExBM,EAAKN,iBAAmB,iGAK9BX,EAAAe,UAAA8B,mBAAA,SAAmBJ,GACnBnC,KAAKJ,OAAO4C,SAAS,CAAC,mBAAoBL,KA7GjCzC,EAAuB+C,WAAA,CALnCnD,OAAAoD,UAAU,CACTC,SAAU,sBACVC,YAAa,mCACbC,UAAW,CAAC,sCAEDnD,GAAb,GAAaoD,QAAApD,wBAAAA","file":"project-details.component.min.js","sourcesContent":["import { Component } from '@angular/core';\nimport { ProjectServicesService } from '../services/project-services.service';\nimport { OfferServicesService } from '../services/offer-services.service';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute } from '@angular/router';\nimport { Project } from '../modules/Project.module';\nimport { Offer } from '../modules/Offers.module';\nimport { CreateOffer } from '../modules/CreateOffer.module';\n\n\n@Component({\n  selector: 'app-project-details',\n  templateUrl: './project-details.component.html',\n  styleUrls: ['./project-details.component.css']\n})\nexport class ProjectDetailsComponent {\n  projectId!: number;\n  id!: number; // Property to store the project ID\n  projectDetails:Project= new Project();\n     console = console;\n  OfferDetails: Offer[] = [];\n    acceptanceStatus: string | null = null; \n   createOffer: CreateOffer = new CreateOffer(); // Initialize createOffer with a new instance of CreateOffer\nshowBidSection: boolean = true;\n  constructor(private http: HttpClient,  private router: Router, private projectService: ProjectServicesService,private offerService:OfferServicesService , private route: ActivatedRoute,) { }\n ngOnInit(): void {\n  // Retrieve the project ID from the route parameter\n  this.route.params.subscribe(params => {\n    this.projectId = +params['id']; // Assuming the route parameter name is 'id'\n    \n\n    // Load the 'showBidSection' value from browser storage when the component initializes\n    const storedShowBidSection = localStorage.getItem(`showBidSection_${this.projectId}`);\n    if (storedShowBidSection !== null) {\n      this.showBidSection = JSON.parse(storedShowBidSection);\n    }\n\n    this.getProjectDetails();\n    this.getOfferDetails();\n  });\n}\n\nhideBidSection() {\n  this.showBidSection = false;\n  // Save the 'showBidSection' value to browser storage when it changes\n  localStorage.setItem(`showBidSection_${this.projectId}`, JSON.stringify(this.showBidSection));\n}\n\n// Rename the method to toggleBidSection\ntoggleBidSection() {\n  this.showBidSection = !this.showBidSection;\n  // Save the 'showBidSection' value to browser storage when it changes\n  localStorage.setItem(`showBidSection_${this.projectId}`, JSON.stringify(this.showBidSection));\n}\n\n  getProjectDetails() {\n    // Call the GetOneProject function with the project ID\n    this.projectService.GetOneProject(this.projectId).subscribe(\n      (data: any) => {\n        // Handle the response, here 'data' contains the project details\n        this.projectDetails = data;\n        // You can now use 'this.projectDetails' to display the project details on your template\n      },\n      error => {\n        // Handle the error if the API call fails\n        console.error('Error fetching project details:', error);\n      });\n}\n\n  CreateOffers():void {\n    this.offerService.CreateOffer(this.createOffer,this.projectId).subscribe(\n    () => {\n        console.log(`offer item  updated successfully.`);\n        this.getOfferDetails();\n   \n    },\n    (error: any) => {\n      console.log(`Error updating }: ${error}`);\n    }\n  );;\n\n    \n  }\n    getSafeImageUrl(base64String: string | undefined): string {\n  if (base64String) {\n    return 'data:image/jpeg;base64,' + base64String;\n  } else {\n   \n    return ' ';\n  }\n}\n  getOfferDetails(){\n  \n    this.offerService.GetOffer(this.projectId).subscribe(\n      (data: any) => {\n        // Handle the response, here 'data' contains the project details\n        this.OfferDetails = data;\n        // You can now use 'this.projectDetails' to display the project details on your template\n      },\n      error => {\n        // Handle the error if the API call fails\n        console.error('Error fetching project details:', error);\n      });\n  }\n\n    AcceptOffer(id: number): void {\n    this.offerService.AcceptProject(id).subscribe(\n      (response: any) => {\n        console.log(`Accepted offer successfully.`);\n  this.toggleBidSection(); \n        this.getOfferDetails();\n        this.acceptanceStatus = `Offer accepted! You have accepted the offer with ID ${response.id}.`;\n      },\n      (error: any) => {\n        console.log(`Error accepting offer: ${error}`);\n        if (error.status === 400 && error.error === 'Invalid request. You have already accepted an offer for this project.') {\n          this.acceptanceStatus = 'Invalid request! You have already accepted an offer for this project.';\n        } else {\n          this.acceptanceStatus = 'Error accepting offer. An error occurred while accepting the offer. Please try again later.';\n        }\n      }\n    );\n    }\n    viewProjectDetails(id: number) {\n    this.router.navigate(['/project-details', id]);\n  }\n\n\n}\n"]}