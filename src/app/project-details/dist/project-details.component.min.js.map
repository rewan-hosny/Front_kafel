{"version":3,"sources":["project-details.component.ts"],"names":["core_1","require","Project_module_1","CreateOffer_module_1","person_module_1","acceptedOffer_module_1","ProjectDetailsComponent","http","authService","router","projectService","offerService","route","this","person","Person","acceptoffer","AcceptedOffer","projectDetails","Project","console","OfferDetails","acceptanceStatus","createOffer","CreateOffer","showBidSection","prototype","ngOnInit","_this","params","subscribe","projectId","storedShowBidSection","localStorage","getItem","JSON","parse","getProjectDetails","getOfferDetails","PersonData","getIfFreelance","GetAcceptedOffer","GetAcceptProject","result","error","log","hideBidSection","setItem","stringify","toggleBidSection","GetOneProject","data","GetIfFreelance","messagge","freelance","CreateOffers","getSafeImageUrl","base64String","GetOffer","GetUser","AcceptOffer","id","AcceptProject","response","status","viewProjectDetails","navigate","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"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","file":"project-details.component.min.js","sourcesContent":["import { Component } from '@angular/core';\nimport { ProjectServicesService } from '../services/project-services.service';\nimport { OfferServicesService } from '../services/offer-services.service';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute } from '@angular/router';\nimport { Project } from '../modules/Project.module';\nimport { Offer } from '../modules/Offers.module';\nimport { CreateOffer } from '../modules/CreateOffer.module';\nimport { AuthServicesService } from '../services/auth-services.service';\nimport { Person } from '../modules/person/person.module';\nimport { AcceptedOffer } from '../modules/acceptedOffer.module';\n\n\n@Component({\n  selector: 'app-project-details',\n  templateUrl: './project-details.component.html',\n  styleUrls: ['./project-details.component.css']\n})\nexport class ProjectDetailsComponent {\n  projectId!: number;\n  person: Person = new Person();\n    acceptoffer: AcceptedOffer = new AcceptedOffer();\n  id!: number; // Property to store the project ID\n  projectDetails:Project= new Project();\n  console = console;\n   messagge:any; \n  OfferDetails: Offer[] = [];\n    acceptanceStatus: string | null = null; \n   createOffer: CreateOffer = new CreateOffer(); // Initialize createOffer with a new instance of CreateOffer\nshowBidSection: boolean = true;\n  constructor(private http: HttpClient, private authService: AuthServicesService,private router: Router, private projectService: ProjectServicesService,private offerService:OfferServicesService , private route: ActivatedRoute,) { }\n ngOnInit(): void {\n  // Retrieve the project ID from the route parameter\n  this.route.params.subscribe(params => {\n    this.projectId = +params['id']; // Assuming the route parameter name is 'id'\n    \n\n    // Load the 'showBidSection' value from browser storage when the component initializes\n    const storedShowBidSection = localStorage.getItem(`showBidSection_${this.projectId}`);\n    if (storedShowBidSection !== null) {\n      this.showBidSection = JSON.parse(storedShowBidSection);\n    }\n\n    this.getProjectDetails();\n    this.getOfferDetails();\n    this.PersonData();\n    this.getIfFreelance();\n     this.GetAcceptedOffer();\n  });\n}\n GetAcceptedOffer() {\n    this.offerService.GetAcceptProject(this.projectId).subscribe(\n      (result: any) => {\n        this.acceptoffer = result;\n  \n      },\n      (error: any) => {\n        console.log(error);\n      }\n    );\n }\n  \nhideBidSection() {\n  this.showBidSection = false;\n  // Save the 'showBidSection' value to browser storage when it changes\n  localStorage.setItem(`showBidSection_${this.projectId}`, JSON.stringify(this.showBidSection));\n}\n\n// Rename the method to toggleBidSection\ntoggleBidSection() {\n  this.showBidSection = !this.showBidSection;\n  // Save the 'showBidSection' value to browser storage when it changes\n  localStorage.setItem(`showBidSection_${this.projectId}`, JSON.stringify(this.showBidSection));\n}\n\n  getProjectDetails() {\n    // Call the GetOneProject function with the project ID\n    this.projectService.GetOneProject(this.projectId).subscribe(\n      (data: any) => {\n        // Handle the response, here 'data' contains the project details\n        this.projectDetails = data;\n        // You can now use 'this.projectDetails' to display the project details on your template\n      },\n      error => {\n        // Handle the error if the API call fails\n        console.error('Error fetching project details:', error);\n      });\n}\n  getIfFreelance(){\n  \n    this.offerService.GetIfFreelance().subscribe(\n      (data: any) => {\n        // Handle the response, here 'data' contains the project details\n        this.messagge = data;\n        console.log(this.messagge)\n        // You can now use 'this.projectDetails' to display the project details on your template\n      },\n      error => {\n        // Handle the error if the API call fails\n   \n            console.log(this.messagge.freelance)\n        console.error('Error fetching project details:', error);\n      });\n  }\n  CreateOffers():void {\n    this.offerService.CreateOffer(this.createOffer,this.projectId).subscribe(\n    () => {\n        console.log(`offer item  updated successfully.`);\n        this.getOfferDetails();\n   \n    },\n    (error: any) => {\n      console.log(`Error updating }: ${error}`);\n    }\n  );;\n\n    \n  }\n  \n    getSafeImageUrl(base64String: string | undefined): string {\n  if (base64String) {\n    return 'data:image/jpeg;base64,' + base64String;\n  } else {\n   \n    return ' ';\n  }\n}\n  getOfferDetails(){\n  \n    this.offerService.GetOffer(this.projectId).subscribe(\n      (data: any) => {\n        // Handle the response, here 'data' contains the project details\n        this.OfferDetails = data;\n        // You can now use 'this.projectDetails' to display the project details on your template\n      },\n      error => {\n        // Handle the error if the API call fails\n        console.error('Error fetching project details:', error);\n      });\n  }\n   \n  PersonData() {\n    this.authService.GetUser().subscribe(\n      (result: any) => {\n        this.person = result;\n      },\n      (error: any) => {\n        console.log(error);\n      }\n    );\n  }\n\n    AcceptOffer(id: number): void {\n    this.offerService.AcceptProject(id).subscribe(\n      (response: any) => {\n        console.log(`Accepted offer successfully.`);\n  this.toggleBidSection(); \n        this.getOfferDetails();\n        this.acceptanceStatus = `Offer accepted! You have accepted the offer with ID ${response.id}.`;\n      },\n      (error: any) => {\n        console.log(`Error accepting offer: ${error}`);\n        if (error.status === 400 && error.error === 'Invalid request. You have already accepted an offer for this project.') {\n          this.acceptanceStatus = 'Invalid request! You have already accepted an offer for this project.';\n        } else {\n          this.acceptanceStatus = 'Error accepting offer. An error occurred while accepting the offer. Please try again later.';\n        }\n      }\n    );\n    }\n    viewProjectDetails(id: number) {\n    this.router.navigate(['/manageProject', id]);\n  }\n\n\n}\n"]}