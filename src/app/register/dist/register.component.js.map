{"version":3,"sources":["register.component.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA0C;AAG1C,iEAAyD;AAgBzD;IAGE,2BAAoB,WAAgC,EAAU,MAAc,EAAU,SAA2B;QAA7F,gBAAW,GAAX,WAAW,CAAqB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,cAAS,GAAT,SAAS,CAAkB;QAFlH,YAAO,GAAW,IAAI,sBAAM,EAAE,CAAC,CAAC,2DAA2D;IAE4B,CAAC;IACzH,oCAAQ,GAAR;QAAA,iBAyBC;QAxBC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAC/C,UAAC,QAAa;YACZ,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEtB,qDAAqD;YACrD,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEtD,+CAA+C;YAC/C,IAAM,YAAY,GAAG,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEhE,0CAA0C;YAC1C,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,4DAA4D,CAAC,CAAC,CAAC;YACzG,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,sEAAsE,CAAC,CAAC,CAAC;YAErH,4BAA4B;YAC5B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAClC,CAAC,EACD,UAAC,KAAU;YACT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,gDAAgD;YACjF,6BAA6B;QAC/B,CAAC,CACF,CAAC;IACJ,CAAC;IA7BY,iBAAiB;QAL7B,gBAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,2BAA2B;YACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;SACxC,CAAC;OACW,iBAAiB,CAiC7B;IAAD,wBAAC;CAjCD,AAiCC,IAAA;AAjCY,8CAAiB","file":"register.component.js","sourcesContent":["import { Component } from '@angular/core';\nimport { AuthServicesService } from '../services/auth-services.service';\n\nimport { Person } from '../modules/person/person.module';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms'; // Import the FormsModule\nimport { NgModule } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n newItem: Person = new Person(); // Initialize the 'newItem' with a new instance of 'Person'\n\n  constructor(private authService: AuthServicesService, private router: Router, private jwtHelper: JwtHelperService,) { }\nregister(): void {\n  this.authService.register(this.newItem).subscribe(\n    (response: any) => {\n      // Handle the successful response here\n      console.log(response);\n\n      // Store the JWT token in local storage (as a string)\n      localStorage.setItem('Authorization', response.token);\n\n      // Decode the JWT token to get user information\n      const decodedToken = this.jwtHelper.decodeToken(response.token);\n\n      // Store user information in local storage\n      localStorage.setItem('name', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"]);\n      localStorage.setItem('userid', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"]);\n\n      // Redirect to the home page\n      this.router.navigate(['/home']);\n    },\n    (error: any) => {\n      console.log(error);\n      console.log(error.error.errors); // Log the specific error messages, if available\n      // Handle the error as needed\n    }\n  );\n}\n\n\n\n}\n"]}