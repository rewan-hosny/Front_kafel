{"version":3,"sources":["register.component.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA0C;AAG1C,iEAAyD;AAiBzD;IAUE,2BAAoB,WAAgC,EAAU,MAAc,EAAU,SAA2B;QAA7F,gBAAW,GAAX,WAAW,CAAqB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,cAAS,GAAT,SAAS,CAAkB;QATjH,iBAAY,GAAW,EAAE,CAAC;QAG1B,UAAK,GAAW,EAAE,CAAC;QACnB,YAAO,GAAW,IAAI,sBAAM,EAAE,CAAC,CAAC,2DAA2D;QAC3F,uBAAkB,GAAa,EAAE,CAAC;QAChC,kBAAa,GAAQ,EAAE,CAAC,CAAC,yDAAyD;IAGiC,CAAC;IAEtH,+DAA+D;IAC/D,oCAAQ,GAAR;QAAA,iBAoCC;QAnCC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAC/C,UAAC,QAAa;YACZ,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEtB,qDAAqD;YACrD,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEtD,+CAA+C;YAC/C,IAAM,YAAY,GAAG,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEhE,0CAA0C;YAC1C,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,4DAA4D,CAAC,CAAC,CAAC;YACzG,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,sEAAsE,CAAC,CAAC,CAAC;YAIrH,KAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC;YACrC,KAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,2CAA2C;YAEpE,4BAA4B;YAClC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAClC,CAAC,EACD,UAAC,KAAK;YACJ,KAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;YACrC,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YAC9C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC9B,OAAO,CAAC,GAAG,CAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACtC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAClC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,CAAC,CACF,CAAC;IACJ,CAAC;IAjDU,iBAAiB;QAL7B,gBAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,2BAA2B;YACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;SACxC,CAAC;OACW,iBAAiB,CAoD7B;IAAD,wBAAC;CApDD,AAoDC,IAAA;AApDY,8CAAiB","file":"register.component.js","sourcesContent":["import { Component } from '@angular/core';\nimport { AuthServicesService } from '../services/auth-services.service';\n\nimport { Person } from '../modules/person/person.module';\n\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms'; // Import the FormsModule\nimport { NgModule } from '@angular/core';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  errorMessage: string = '';\n   registrationResponse: any;\n  registrationError: any;\n  title: string = '';\n  newItem: Person = new Person(); // Initialize the 'newItem' with a new instance of 'Person'\n  registrationErrors: string[] = [];\n    errorMessages: any = {}; // Initialize an empty object to store the error messages\n\n\n  constructor(private authService: AuthServicesService, private router: Router, private jwtHelper: JwtHelperService) { }\n\n  // Rename the method to avoid conflicts with the service method\n  register(): void {\n    this.authService.register(this.newItem).subscribe(\n      (response: any) => {\n        // Handle the successful response here\n        console.log(response);\n\n        // Store the JWT token in local storage (as a string)\n        localStorage.setItem('Authorization', response.token);\n\n        // Decode the JWT token to get user information\n        const decodedToken = this.jwtHelper.decodeToken(response.token);\n\n        // Store user information in local storage\n        localStorage.setItem('name', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"]);\n        localStorage.setItem('userid', decodedToken[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"]);\n\n  \n\n        this.registrationResponse = response;\n        this.registrationError = null; // Clear any previous error when successful\n\n              // Redirect to the home page\n        this.router.navigate(['/home']);\n      },\n      (error) => {\n        this.registrationError = error;\n        this.title = error.error.error.title;\n        this.errorMessages = error.error.error.errors;\n        console.log(error);\n             console.log(error.error);\n        console.log( error.error.error.title);\n        console.log(error.error.error.errors);\n              console.log(error.response);\n        console.log(Object.keys(error));\n      }\n    );\n  }\n\n\n}\n"]}