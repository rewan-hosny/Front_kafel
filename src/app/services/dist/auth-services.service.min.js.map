{"version":3,"sources":["auth-services.service.ts"],"names":["http_1","require","core_1","environment_1","AuthServicesService","http","jwtHelper","localStorage","router","this","registerr","loginn","Complete","Image","user","UpdatePerson","getImage","prototype","register","person","post","environment","apiUrl","login","CompleteProfile","completeprofile","token","getItem","httpOptions","headers","HttpHeaders","Authorization","Content-Type","UpdateImage","addImage","formData","FormData","console","log","imageUrl","append","name","patch","GetUser","get","UpdateUser","GetImage","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,wBACAC,OAAAD,QAAA,iBAGAE,cAAAF,QAAA,gCAYAG,oBAAA,WASE,SAAAA,EAAoBC,EAA0BC,EAAqCC,EAA2CC,GAA1GC,KAAAJ,KAAAA,EAA0BI,KAAAH,UAAAA,EAAqCG,KAAAF,aAAAA,EAA2CE,KAAAD,OAAAA,EARtHC,KAAAC,UAAY,gBACZD,KAAAE,OAAS,aACTF,KAAAG,SAAW,wBACXH,KAAAI,MAAQ,aACRJ,KAAAK,KAAO,YACPL,KAAAM,aAAe,kBACfN,KAAAO,SAAW,aAmFrB,OAhFEZ,EAAAa,UAAAC,SAAA,SAASC,GACP,OAAOV,KAAKJ,KAAKe,KAAQjB,cAAAkB,YAAYC,OAAM,IAAIb,KAAKC,UAAaS,IAKnEf,EAAAa,UAAAM,MAAA,SAAMA,GACJ,OAAOd,KAAKJ,KAAKe,KAAQjB,cAAAkB,YAAYC,OAAM,IAAIb,KAAKE,OAAUY,IAIhEnB,EAAAa,UAAAO,gBAAA,SAAgBC,GACd,IAAMC,EAAQnB,aAAaoB,QAAQ,iBAC7BC,EAAc,CAClBC,QAAS,IAAI7B,OAAA8B,YAAY,CACvBC,cAAiB,UAAUL,EAC3BM,eAAgB,sBAKpB,OAAOvB,KAAKJ,KAAKe,KAAQjB,cAAAkB,YAAYC,OAAM,IAAIb,KAAKG,SAAYa,EAAiBG,IAInFxB,EAAAa,UAAAgB,YAAA,SAAYC,GACV,IAAMR,EAAQnB,aAAaoB,QAAQ,iBAC7BC,EAAc,CAClBC,QAAS,IAAI7B,OAAA8B,YAAY,CACvBC,cAAiB,UAAUL,KAIzBS,EAAW,IAAIC,SAKrB,OAJAC,QAAQC,IAAIJ,EAASK,UAEjBL,EAASK,UACXJ,EAASK,OAAO,QAASN,EAASK,SAAUL,EAASK,SAASE,MACzDhC,KAAKJ,KAAKqC,MAASvC,cAAAkB,YAAYC,OAAM,IAAIb,KAAKI,MAASsB,EAAUP,IAK1ExB,EAAAa,UAAA0B,QAAA,WACE,IAAMjB,EAAQnB,aAAaoB,QAAQ,iBAC7BC,EAAc,CAClBC,QAAS,IAAI7B,OAAA8B,YAAY,CACvBC,cAAiB,UAAUL,EAC3BM,eAAgB,sBAGpB,OAAOvB,KAAKJ,KAAKuC,IACZzC,cAAAkB,YAAYC,OAAM,IAAIb,KAAKK,KAAQc,IAI1CxB,EAAAa,UAAA4B,WAAA,SAAW1B,GACT,IAAMO,EAAQnB,aAAaoB,QAAQ,iBAC7BC,EAAc,CAClBC,QAAS,IAAI7B,OAAA8B,YAAY,CACvBC,cAAiB,UAAUL,KAK/B,OAAOjB,KAAKJ,KAAKqC,MAASvC,cAAAkB,YAAYC,OAAM,IAAIb,KAAKM,aAAgBI,EAAQS,IAG9ExB,EAAAa,UAAA6B,SAAA,WACC,IAAMpB,EAAQnB,aAAaoB,QAAQ,iBAC7BC,EAAc,CAClBC,QAAS,IAAI7B,OAAA8B,YAAY,CACvBC,cAAiB,UAAUL,EAC3BM,eAAgB,sBAGpB,OAAOvB,KAAKJ,KAAKuC,IACZzC,cAAAkB,YAAYC,OAAM,IAAIb,KAAKO,SAAYY,IAvFnCxB,EAAmB2C,WAAA,CAH/B7C,OAAA8C,WAAW,CACVC,WAAY,UAED7C,GAAb,GAAa8C,QAAA9C,oBAAAA","file":"auth-services.service.min.js","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Person } from '../modules/person/person.module';\nimport { Login } from '../modules/login.module';\nimport { CompleteMyProfile } from '../modules/CompleteProfile.module';\nimport { AddImage } from '../modules/AddImge.module';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthServicesService {\n  private registerr = \"Auth/register\";\n  private loginn = \"Auth/login\";\n  private Complete = \"Auth/complete-profile\";\n  private Image = \"Auth/Image\";\n  private user = \"Auth/User\";\n  private UpdatePerson = \"Auth/UpdateUser\";\n  private getImage = \"Auth/Image\";\n\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService, private localStorage: LocalStorageService, private router: Router) { }\n  register(person: Person): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/${this.registerr}`, person);\n  }\n  \n  \n  \n  login(login: Login): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/${this.loginn}`, login);\n  }\n  \n    \n  CompleteProfile(completeprofile: CompleteMyProfile): Observable<any> {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n   \n        \n    return this.http.post(`${environment.apiUrl}/${this.Complete}`, completeprofile, httpOptions);\n  }\n\n      \n  UpdateImage(addImage: AddImage): Observable<any> {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n      })\n    };\n    // Create form data\n    const formData = new FormData();\n    console.log(addImage.imageUrl);\n    // Store form name as \"file\" with file data\n    if (addImage.imageUrl)\n      formData.append(\"image\", addImage.imageUrl, addImage.imageUrl.name);\n    return this.http.patch(`${environment.apiUrl}/${this.Image}`, formData, httpOptions);\n  }\n\n  \n\n  GetUser() {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n      `${environment.apiUrl}/${this.user}`, httpOptions\n    );\n  }\n  \n  UpdateUser(person: Person): Observable<any> {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n      })\n    };\n    // Create form data\n    \n    return this.http.patch(`${environment.apiUrl}/${this.UpdatePerson}`, person, httpOptions);\n  }\n\n   GetImage() {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n      `${environment.apiUrl}/${this.getImage}`, httpOptions\n    );\n  }\n}"]}