{"version":3,"sources":["auth-services.service.ts"],"names":["http_1","require","core_1","environment_1","rxjs_1","operators_1","AuthServicesService","http","jwtHelper","localStorage","router","this","registerr","loginn","Complete","Image","user","UpdatePerson","getImage","prototype","register","person","post","environment","apiUrl","pipe","catchError","handleError","error","status","console","log","throwError","Error","login","CompleteProfile","completeprofile","token","getItem","httpOptions","headers","HttpHeaders","Authorization","Content-Type","UpdateImage","addImage","formData","FormData","imageUrl","append","name","patch","GetUser","get","UpdateUser","GetImage","__decorate","Injectable","providedIn","exports"],"mappings":"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","file":"auth-services.service.min.js","sourcesContent":["import { HttpClient, HttpHeaders,HttpErrorResponse  } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\n\nimport { Person } from '../modules/person/person.module';\nimport { Login } from '../modules/login.module';\nimport { CompleteMyProfile } from '../modules/CompleteProfile.module';\nimport { AddImage } from '../modules/AddImge.module';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthServicesService {\n  private registerr = \"Auth/register\";\n  private loginn = \"Auth/login\";\n  private Complete = \"Auth/complete-profile\";\n  private Image = \"Auth/Image\";\n  private user = \"Auth/User\";\n  private UpdatePerson = \"Auth/UpdateUser\";\n  private getImage = \"Auth/Image\";\n\n\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService, private localStorage: LocalStorageService, private router: Router) { }\n  register(person: Person): Observable<any> {\n     return this.http.post(`${environment.apiUrl}/${this.registerr}`, person).pipe(\n      catchError(this.handleError)\n    );\n\n  }\n\n  private handleError(error: HttpErrorResponse) {\n  if (error.status === 400) {\n    // A client-side or network error occurred. Handle it accordingly.\nconsole.log(error)\n    return throwError(() => ({\nerror:error\n     }));\n  }\n  else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong.\n return throwError(()=>new Error( error.error));\n  }\n  // Return an observable with a user-facing error message.\n  return throwError(() => new Error('Something bad happened; please try again later.',error.error.errors));\n}\n\n  \n  \n  login(login: Login): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/${this.loginn}`, login).pipe(\n      catchError((error: HttpErrorResponse) => {\n        return throwError(error.error);\n      })\n    );\n  }\n  \n  \n    \n  CompleteProfile(completeprofile: CompleteMyProfile): Observable<any> {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n   \n        \n    return this.http.post(`${environment.apiUrl}/${this.Complete}`, completeprofile, httpOptions);\n  }\n\n      \n  UpdateImage(addImage: AddImage): Observable<any> {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n      })\n    };\n    // Create form data\n    const formData = new FormData();\n    console.log(addImage.imageUrl);\n    // Store form name as \"file\" with file data\n    if (addImage.imageUrl)\n      formData.append(\"image\", addImage.imageUrl, addImage.imageUrl.name);\n    return this.http.patch(`${environment.apiUrl}/${this.Image}`, formData, httpOptions);\n  }\n\n  \n\n  GetUser() {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n      `${environment.apiUrl}/${this.user}`, httpOptions\n    );\n  }\n  \n  UpdateUser(person: Person): Observable<any> {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n      })\n    };\n    // Create form data\n    \n    return this.http.patch(`${environment.apiUrl}/${this.UpdatePerson}`, person, httpOptions);\n  }\n\n   GetImage() {\n    const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n      `${environment.apiUrl}/${this.getImage}`, httpOptions\n    );\n  }\n}"]}