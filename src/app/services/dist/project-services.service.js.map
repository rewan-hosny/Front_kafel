{"version":3,"sources":["project-services.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAG3C,4DAA2D;AAE3D,6CAA8D;AAU9D;IAKC,gCAAoB,IAAgB,EAAU,SAA2B,EAAU,YAAiC,EAAU,MAAc;QAAxH,SAAI,GAAJ,IAAI,CAAY;QAAU,cAAS,GAAT,SAAS,CAAkB;QAAU,iBAAY,GAAZ,YAAY,CAAqB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAJnI,kBAAa,GAAG,uBAAuB,CAAC;QACxC,eAAU,GAAG,uBAAuB,CAAC;QACrC,kBAAa,GAAG,SAAS,CAAC;IAE6G,CAAC;IAE/I,8CAAa,GAAb;QACD,IAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QACpD,IAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,kBAAW,CAAC;gBACvB,eAAe,EAAE,YAAU,KAAO;aACnC,CAAC;SACH,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,yBAAW,CAAC,MAAM,SAAI,IAAI,CAAC,aAAe,EAAE,WAAW,CAAC,CAAC;IAChF,CAAC;IAGF,8CAAa,GAAb,UAAc,EAAU;QAChB,IAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAC1D,IAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,kBAAW,CAAC;gBACvB,eAAe,EAAE,YAAU,KAAO;gBAClC,cAAc,EAAE,kBAAkB;aACnC,CAAC;SACH,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAChB,yBAAW,CAAC,MAAM,SAAI,IAAI,CAAC,UAAU,SAAI,EAAI,EAAC,WAAW,CAC5D,CAAC;IACJ,CAAC;IAGC,2CAAU,GAAV,UAAW,OAAgB;QACvB,IAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QACxD,IAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,kBAAW,CAAC;gBACvB,eAAe,EAAE,YAAU,KAAO;gBAClC,cAAc,EAAE,kBAAkB;aACnC,CAAC;SACH,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAI,yBAAW,CAAC,MAAM,SAAI,IAAI,CAAC,aAAe,EAAE,OAAO,EAAC,WAAW,CAAC,CAAC;IAC5F,CAAC;IA1CU,sBAAsB;QAJlC,iBAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OAEW,sBAAsB,CA+ClC;IAAD,6BAAC;CA/CD,AA+CC,IAAA;AA/CY,wDAAsB","file":"project-services.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\nimport { HttpClient ,HttpHeaders} from '@angular/common/http';\nimport { Project } from '../modules/Project.module';\nimport { AllCategories } from '../modules/Category.module';\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ProjectServicesService {\n  private GetAllProject = \"Project/GetAllProject\";\n  private OneProject = \"Project/GetOneProject\";\n  private CreateProject = \"Project\";\n\n constructor(private http: HttpClient, private jwtHelper: JwtHelperService, private localStorage: LocalStorageService, private router: Router) { }\n\n   getAllProject() {\n  const token = localStorage.getItem('Authorization');\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    })\n  };\n   \n  return this.http.get(`${environment.apiUrl}/${this.GetAllProject}`, httpOptions);\n   }\n  \n  \n  GetOneProject(id: number) {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n     `${environment.apiUrl}/${this.OneProject}/${id}`,httpOptions\n    );\n  }\n  \n\n    AddProject(project: Project): Observable<any> {\n        const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(`${environment.apiUrl}/${this.CreateProject}`, project,httpOptions);\n  }\n\n\n  \n  \n}\n"]}