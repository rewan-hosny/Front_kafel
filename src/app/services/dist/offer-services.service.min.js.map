{"version":3,"sources":["offer-services.service.ts"],"names":["http_1","require","core_1","environment_1","OfferServicesService","http","jwtHelper","localStorage","router","this","Offer","GetCategory","Accept","PostMessage","prototype","GetOffer","id","token","getItem","httpOptions","headers","HttpHeaders","Authorization","Content-Type","get","environment","apiUrl","CreateOffer","post","GetAllCategories","GetAcceptProject","GetMessages","AcceptProject","PotsMessage","message","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,wBACAC,OAAAD,QAAA,iBAGAE,cAAAF,QAAA,gCAUAG,qBAAA,WAQI,SAAAA,EAAoBC,EAA0BC,EAAqCC,EAA2CC,GAA1GC,KAAAJ,KAAAA,EAA0BI,KAAAH,UAAAA,EAAqCG,KAAAF,aAAAA,EAA2CE,KAAAD,OAAAA,EAPxHC,KAAAC,MAAQ,eACRD,KAAAE,YAAc,oBACdF,KAAAG,OAAS,sBACTH,KAAAI,YAAc,kBAyFxB,OAnFIT,EAAAU,UAAAC,SAAA,SAASC,GACH,IAAMC,EAAQV,aAAaW,QAAQ,iBACnCC,EAAc,CAClBC,QAAS,IAAIpB,OAAAqB,YAAY,CACvBC,cAAiB,UAAUL,EAC3BM,eAAgB,sBAGpB,OAAOd,KAAKJ,KAAKmB,IACbrB,cAAAsB,YAAYC,OAAM,IAAIjB,KAAKC,MAAK,IAAIM,EAAKG,IAG/Cf,EAAAU,UAAAa,YAAA,SAAYjB,EAAoBM,GAC1B,IAAMC,EAAQV,aAAaW,QAAQ,iBACjCC,EAAc,CAClBC,QAAS,IAAIpB,OAAAqB,YAAY,CACvBC,cAAiB,UAAUL,EAC3BM,eAAgB,sBAGpB,OAAOd,KAAKJ,KAAKuB,KAAQzB,cAAAsB,YAAYC,OAAM,IAAIjB,KAAKC,MAAK,IAAIM,EAAMN,EAAMS,IAIzEf,EAAAU,UAAAe,iBAAA,WAEA,OAAOpB,KAAKJ,KAAKmB,IACbrB,cAAAsB,YAAYC,OAAM,IAAIjB,KAAKE,cAM7BP,EAAAU,UAAAgB,iBAAA,SAAiBd,GACb,IAAMC,EAAQV,aAAaW,QAAQ,iBACnCC,EAAc,CAClBC,QAAS,IAAIpB,OAAAqB,YAAY,CACvBC,cAAiB,UAAUL,EAC3BM,eAAgB,sBAGpB,OAAOd,KAAKJ,KAAKmB,IACbrB,cAAAsB,YAAYC,OAAM,IAAIjB,KAAKG,OAAM,IAAII,EAAKG,IAK7Cf,EAAAU,UAAAiB,YAAA,SAAYf,GACP,IAAMC,EAAQV,aAAaW,QAAQ,iBACnCC,EAAc,CAClBC,QAAS,IAAIpB,OAAAqB,YAAY,CACvBC,cAAiB,UAAUL,EAC3BM,eAAgB,sBAGpB,OAAOd,KAAKJ,KAAKmB,IACbrB,cAAAsB,YAAYC,OAAM,IAAIjB,KAAKI,YAAW,IAAIG,EAAKG,IAGnDf,EAAAU,UAAAkB,cAAA,SAAchB,GACV,IAAMC,EAAQV,aAAaW,QAAQ,iBACjCC,EAAc,CAClBC,QAAS,IAAIpB,OAAAqB,YAAY,CACvBC,cAAiB,UAAUL,EAC3BM,eAAgB,sBAGpB,OAAOd,KAAKJ,KAAKuB,KAAQzB,cAAAsB,YAAYC,OAAM,IAAIjB,KAAKG,OAAM,IAAII,EAAM,GAAGG,IAGxEf,EAAAU,UAAAmB,YAAA,SAAYC,EAAkBlB,GACzB,IAAMC,EAAQV,aAAaW,QAAQ,iBACjCC,EAAc,CAClBC,QAAS,IAAIpB,OAAAqB,YAAY,CACvBC,cAAiB,UAAUL,EAC3BM,eAAgB,sBAGpB,OAAOd,KAAKJ,KAAKuB,KAAQzB,cAAAsB,YAAYC,OAAM,IAAIjB,KAAKI,YAAW,IAAIG,EAAMkB,EAAQf,IAxFxEf,EAAoB+B,WAAA,CAJhCjC,OAAAkC,WAAW,CACVC,WAAY,UAGDjC,GAAb,GAAakC,QAAAlC,qBAAAA","file":"offer-services.service.min.js","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\nimport { CreateOffer } from '../modules/CreateOffer.module';\nimport { Observable } from 'rxjs';\nimport { Message } from '../modules/Message.module';\n\n@Injectable({\n  providedIn: 'root'\n\n})\nexport class OfferServicesService {\n  private Offer = \"Offer/Offers\";\n  private GetCategory = \"Offer/allCategory\";\n  private Accept = \"Offer/AcceptProject\";\n  private PostMessage = \"Message/Message\";\n  \n  \n  \n    constructor(private http: HttpClient, private jwtHelper: JwtHelperService, private localStorage: LocalStorageService, private router: Router) { }\n\n    GetOffer(id: number) {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n     `${environment.apiUrl}/${this.Offer}/${id}`,httpOptions\n    );\n    }\n  CreateOffer(Offer: CreateOffer, id: number): Observable<any> {\n        const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(`${environment.apiUrl}/${this.Offer}/${id}`, Offer,httpOptions);\n  }\n  \n\n    GetAllCategories() {\n\n    return this.http.get(\n     `${environment.apiUrl}/${this.GetCategory}`\n    );\n    }\n  \n  \n  \n      GetAcceptProject(id: number) {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n     `${environment.apiUrl}/${this.Accept}/${id}`,httpOptions\n    );\n      }\n  \n  \n     GetMessages(id: number) {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n     `${environment.apiUrl}/${this.PostMessage}/${id}`,httpOptions\n    );\n    }\n    AcceptProject(id: number): Observable<any> {\n        const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(`${environment.apiUrl}/${this.Accept}/${id}`, {},httpOptions);\n    }\n  \n   PotsMessage(message: Message, id: number): Observable<any> {\n        const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(`${environment.apiUrl}/${this.PostMessage}/${id}`, message,httpOptions);\n  }\n  \n\n\n}\n"]}