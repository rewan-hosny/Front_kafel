{"version":3,"sources":["offer-services.service.ts"],"names":["http_1","require","core_1","environment_1","OfferServicesService","http","jwtHelper","localStorage","router","this","Offer","GetCategory","Accept","PostMessage","GetFreelance","reciverId","massege","prototype","GetOffer","id","token","getItem","httpOptions","headers","HttpHeaders","Authorization","Content-Type","get","environment","apiUrl","GetIfFreelance","CreateOffer","post","GetAllCategories","GetAcceptProject","GetMessages","AcceptProject","PotsMessage","__decorate","Injectable","providedIn","exports"],"mappings":"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","file":"offer-services.service.min.js","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\nimport { CreateOffer } from '../modules/CreateOffer.module';\nimport { Observable } from 'rxjs';\nimport { Message } from '../modules/Message.module';\n\n@Injectable({\n  providedIn: 'root'\n\n})\nexport class OfferServicesService {\n  private Offer = \"Offer/Offers\";\n  private GetCategory = \"Offer/allCategory\";\n  private Accept = \"Offer/AcceptProject\";\n  private PostMessage = \"Message/Message\";\n    private GetFreelance = \"Project/GetFreelance\";\n\n  \n  reciverId: number = 0;\n   massege: string = '';\n  \n    constructor(private http: HttpClient, private jwtHelper: JwtHelperService, private localStorage: LocalStorageService, private router: Router) { }\n\n    GetOffer(id: number) {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n     `${environment.apiUrl}/${this.Offer}/${id}`,httpOptions\n    );\n    }\n  \n   GetIfFreelance( ) {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n     `${environment.apiUrl}/${this.GetFreelance}`,httpOptions\n    );\n   }\n  \n  \n  CreateOffer(Offer: CreateOffer, id: number): Observable<any> {\n        const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(`${environment.apiUrl}/${this.Offer}/${id}`, Offer,httpOptions);\n  }\n  \n\n    GetAllCategories() {\n\n    return this.http.get(\n     `${environment.apiUrl}/${this.GetCategory}`\n    );\n    }\n  \n  \n  \n      GetAcceptProject(id: number) {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n     `${environment.apiUrl}/${this.Accept}/${id}`,httpOptions\n    );\n      }\n  \n  \n     GetMessages(id: number) {\n          const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(\n     `${environment.apiUrl}/${this.PostMessage}/${id}`,httpOptions\n    );\n    }\n    AcceptProject(id: number): Observable<any> {\n        const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(`${environment.apiUrl}/${this.Accept}/${id}`, {},httpOptions);\n    }\n  \n   PotsMessage(massege: string,reciverId :number, id: number): Observable<any> {\n        const token = localStorage.getItem('Authorization');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(`${environment.apiUrl}/${this.PostMessage}/${id}`, {massege,reciverId},httpOptions);\n  }\n  \n\n\n}\n"]}